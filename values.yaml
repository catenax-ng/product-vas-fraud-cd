global:
  tag: "latest"

dashboard:
  service:
    type: ClusterIP
    port: 80

  image:
    repository: ghcr.io/catenax-ng/product-vas-fraud-dashboard
    tag: main
  replicaCount: 1
  registrySecret: "catenax"
  apiHost: localhost
  apiPort: 80

  ingress:
    enabled: true
    path: "/"
    service:
      port: http
    certManager: "true"

    annotations: 
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/ssl-passthrough: "true"
      nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
      nginx.ingress.kubernetes.io/proxy-body-size: 10m
    
    hosts:
    - name: fraud-dashboard.dev.demo.catena-x.net
      tls: true 
      tlsSecret: fraud-dashboard.dev.demo.catena-x.net-tls

  livenessProbe:
    enabled: false
  readinessProbe:
    enabled: false


api:   
  replicaCount: 1
  registrySecret: "catenax"
  image:
    repository: ghcr.io/catenax-ng/product-vas-fraud-api
    tag: main
  service:
    type: ClusterIP
    port: 80

  ingress:
    enabled: true
    path: "/"
    service:
      port: http
    certManager: "true"

    annotations: 
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/ssl-passthrough: "true"
      nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
      nginx.ingress.kubernetes.io/proxy-body-size: 10m
    paths: /
    hosts:
    - name: api.fraud-dashboard.dev.demo.catena-x.net
      tls: true 
      tlsSecret: api.fraud-dashboard.dev.demo.catena-x.net-tls

  reactAppEnvironment:
  db:
    host: ""
    port: 
    user: ""
    dbName: ""
    password: ""

  dashboardUrl: https://fraud-dashboard.dev.demo.catena-x.net
  keycloak:
    authUrl: ""
    clientResource: "catenax-api"
    clientRole: "realm:default-roles-catenax"
    realm: "catenax"
  sentryDsn: ""
  cdqKey: ""
  livenessProbe:
    enabled: false
  readinessProbe:
    enabled: false

fraudcase:
  replicaCount: 1
  registrySecret: "catenax"
  image:
    repository: registry.catenax-cdq.com/catenax/worker/fraud-sync

  rmqUrl: 
  rmqQueueName: ""
  sentryDsn: ""

  catenaxApiUrl: "https://api.fraud-dashboard.dev.demo.catena-x.net/fraudcases/statistics"
  catenaxApiKey: ""
  
  cdqApiUrl: ""
  cdqApiKey: ""


  

  livenessProbe:
    enabled: false
  readinessProbe:
    enabled: false

rabbitmq:
  enabled: true
  replicaCount: 1
  auth:
    erlangCookie: ""
    username: ""
    password: ""
  plugins: "rabbitmq_management rabbitmq_peer_discovery_k8s"


  ingress:
    enabled: false
    path: /

    pathType: ImplementationSpecific

    ## Set this to true in order to add the corresponding annotations for cert-manager
    ##
    
    certManager: true
    hostname: 
    annotations: 
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/ssl-passthrough: "true"
      nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
      nginx.ingress.kubernetes.io/proxy-body-size: 10m
      nginx/client_max_body_size: 10m
      nginx.ingress.kubernetes.io/proxy-buffering: "on"
      nginx.ingress.kubernetes.io/proxy-connect-timeout: "4000"
      nginx.ingress.kubernetes.io/proxy-next-upstream-timeout: "4000"
      nginx.ingress.kubernetes.io/proxy-next-upstream-tries: "20"
      nginx.ingress.kubernetes.io/proxy-read-timeout: "4000"
      nginx.ingress.kubernetes.io/proxy-send-timeout: "4000"
    tls: true

    
postgresql-ha:
  
  enabled: true
  clusterDomain: cluster.local
  serviceAccount:
    enabled: false
  
  postgresql:
    username: dashboard
    password: 
    repmgrPassword: 
    database: dashboard
    replicaCount: 2 
    updateStrategyType: RollingUpdate    
    securityContext:
      enabled: true
      fsGroup: 1001   
  
    pdb:
      create: false
      minAvailable: 1
  
  postgresqlImage:
    registry: docker.io
    repository: bitnami/postgresql-repmgr
    tag: 11.15.0-debian-10-r44
    debug: false

  pgpool:
    adminPassword: 
    srCheckDatabase: postgres
    replicaCount: 1
    securityContext:
      enabled: true
      fsGroup: 1001

  pgpoolImage:
    registry: docker.io
    repository: bitnami/pgpool
    tag: 4.3.1-debian-10-r38
    pullPolicy: IfNotPresent
    debug: false
  
  volumePermissionsImage:
    registry: docker.io
    repository: bitnami/bitnami-shell
    tag: 10-debian-10-r378
    pullPolicy: Always  
  
  metricsImage:
    registry: docker.io
    repository: bitnami/postgres-exporter
    tag: 0.10.1-debian-10-r66
    pullPolicy: IfNotPresent
    debug: false 
  
  persistence:
    enabled: true    
    accessMode: ReadWriteMany
    size: 8Gi
