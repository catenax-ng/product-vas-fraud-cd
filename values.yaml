global:
  tag: "latest"

dashboard:
  service:
    type: ClusterIP
    port: 80

  image:
    repository: ghcr.io/catenax-ng/product-vas-fraud-dashboard
    tag: main
  replicaCount: 1
  registrySecret: "catenax"
  apiHost: localhost
  apiPort: 80

  ingress:
    enabled: true
    path: "/"
    service:
      port: http
    annotations: 
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/ssl-passthrough: "true"
      nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
      nginx.ingress.kubernetes.io/proxy-body-size: 10m
    
    hosts:
    - name: fraud-dashboard.dev.demo.catena-x.net
      tls: true 
      tlsSecret: fraud-dashboard.dev.demo.catena-x.net-tls

  livenessProbe:
    enabled: false
  readinessProbe:
    enabled: false


api:   
  replicaCount: 1
  registrySecret: "catenax"
  image:
    repository: ghcr.io/catenax-ng/product-vas-fraud-api
    tag: main
  service:
    type: ClusterIP
    port: 81

  ingress:
    enabled: true
    path: "/"
    service:
      port: 81
    annotations: 
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/ssl-passthrough: "true"
      nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
      nginx.ingress.kubernetes.io/proxy-body-size: 10m
    paths: /
    hosts:
    - name: api.fraud-dashboard.dev.demo.catena-x.net
      tls: true 
      tlsSecret: api.fraud-dashboard.dev.demo.catena-x.net-tls

  reactAppEnvironment:
  db:
    host: "product-value-added-service-postgresql-ha-postgresql-headles"
    port: 5432
    # -> secret
 

  dashboardUrl: https://fraud-dashboard.dev.demo.catena-x.net
  keycloak:
    authUrl: "https://catenaxintakssrv.germanywestcentral.cloudapp.azure.com/iamcentralidp/auth/realms/CX-Central/protocol/openid-connect/auth"
    clientResource: "catenax-api"
    clientRole: "realm:default-roles-catenax"
    realm: "catenax"
  # -> secret
  
  livenessProbe:
    enabled: true
  readinessProbe:
    enabled: true


rabbitmq:
  enabled: true
  replicaCount: 1
  auth:
    erlangCookie: <path:value-added-service/data/dev/rmq#erlangCookie>
    username: <path:value-added-service/data/dev/rmq#username>
    password: <path:value-added-service/data/dev/rmq#password>
  plugins: "rabbitmq_management rabbitmq_peer_discovery_k8s"

  definitions:
    queues: |-
     {
      "name":"catenax-fraud-sync-test",
      "vhost":"/",
      "durable":true,
      "auto_delete":false,
      "arguments":{}
     }
  ingress:
    enabled: false
    path: /

    pathType: ImplementationSpecific
    hostname: rabbitmq.catenax-cdq.com
    annotations: 
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/ssl-passthrough: "true"
      nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
      nginx.ingress.kubernetes.io/proxy-body-size: 10m
      nginx/client_max_body_size: 10m
      nginx.ingress.kubernetes.io/proxy-buffering: "on"
      nginx.ingress.kubernetes.io/proxy-connect-timeout: "4000"
      nginx.ingress.kubernetes.io/proxy-next-upstream-timeout: "4000"
      nginx.ingress.kubernetes.io/proxy-next-upstream-tries: "20"
      nginx.ingress.kubernetes.io/proxy-read-timeout: "4000"
      nginx.ingress.kubernetes.io/proxy-send-timeout: "4000"
    tls: true
    
postgresql-ha:
  
  enabled: true
  clusterDomain: cluster.local
  serviceAccount:
    enabled: false
  
  postgresql:
    username: dashboard
    password: <path:value-added-service/data/dev/postgresql#password>
    repmgrPassword: <path:value-added-service/data/dev/postgresqlrepmgrPassword>
    database: dashboard
    replicaCount: 2 
    updateStrategyType: RollingUpdate    
    securityContext:
      enabled: true
      fsGroup: 1001   
  
    pdb:
      create: false
      minAvailable: 1
  
  postgresqlImage:
    registry: docker.io
    repository: bitnami/postgresql-repmgr
    tag: 11.15.0-debian-10-r44
    debug: false

  pgpool:
    adminPassword: <path:value-added-service/data/dev/postgresql#password>
    srCheckDatabase: postgres
    replicaCount: 1
    securityContext:
      enabled: true
      fsGroup: 1001

  pgpoolImage:
    registry: docker.io
    repository: bitnami/pgpool
    tag: 4.3.1-debian-10-r38
    pullPolicy: IfNotPresent
    debug: false
  
  volumePermissionsImage:
    registry: docker.io
    repository: bitnami/bitnami-shell
    tag: 10-debian-10-r378
    pullPolicy: Always  
  
  metricsImage:
    registry: docker.io
    repository: bitnami/postgres-exporter
    tag: 0.10.1-debian-10-r66
    pullPolicy: IfNotPresent
    debug: false 
  
  persistence:
    enabled: true    
    accessMode: ReadWriteMany
    size: 8Gi

airflow:
  enabled: true
  extraPipPackages:
  - apache-airflow[sentry]
  fernetKey: <path:value-added-service/data/dev/airflow#fernetKey>
  image:
    gid: 0
    pullPolicy: IfNotPresent
    pullSecret: ""
    repository: apache/airflow
    tag: 2.1.4-python3.8
    uid: 50000
  
  users:
  - email: peter.schenkel@cdq.com
    firstName: admin
    lastName: admin
    password: admin
    role: Admin
    username: admin
  
  webserverSecretKey: <path:value-added-service/data/dev/airflow#webserverSecretKey>
dags:
  gitSync:
    branch: main
    depth: 1
    enabled: true
    httpSecret: gitsecret
    httpSecretPasswordKey: password
    httpSecretUsernameKey: username
    image:
      gid: 65533
      pullPolicy: IfNotPresent
      repository: k8s.gcr.io/git-sync/git-sync
      tag: v3.2.2
      uid: 65533
    maxFailures: 5
    repo: https://github.com/catenax-ng/product-vas-fraud-dags.git
    repoSubPath: ""
    resources: {}
    revision: HEAD
    syncTimeout: 120
    syncWait: 60
  path: /opt/airflow/dags
  persistence:
    accessMode: ReadOnlyMany
    enabled: false
    size: 1Gi
    
externalDatabase:
  database: airflow
  host: localhost
  passwordSecret: ""
  passwordSecretKey: postgresql-password
  port: 5432
  properties: ""
  type: postgres
  user: airflow
externalRedis:
  databaseNumber: 1
  host: localhost
  passwordSecret: ""
  passwordSecretKey: redis-password
  port: 6379
  properties: ""

  replicas: 1
  
ingress:
  apiVersion: networking.k8s.io/v1
  enabled: true
  flower:
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/ssl-passthrough: "true"
      nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    hosts:
    - name: flower.fraud-dashboard.dev.demo.catena-x.net
      tls: true 
      tlsSecret: api.fraud-dashboard.dev.demo.catena-x.net-tls
    labels: {}
    path: ""
    precedingPaths: []
    succeedingPaths: []
    tls:
      enabled: true
      secretName: flower.fraud-dashboard.dev.demo.catena-x.net-tls
  web:
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/ssl-passthrough: "true"
      nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    hosts:
    - name: airflow.fraud-dashboard.dev.demo.catena-x.net
      tls: true 
      tlsSecret: airflow.fraud-dashboard.dev.demo.catena-x.net-tls
    
   
    tls:
      enabled: true
      secretName: af-tls
logs:
  path: /opt/airflow/logs
  persistence:
    accessMode: ReadWriteMany
    enabled: false
    size: 1Gi
    
pgbouncer:
  enabled: true
  image:
    gid: 1001
    pullPolicy: IfNotPresent
    repository: ghcr.io/airflow-helm/pgbouncer
    tag: 1.15.0-patch.0
    uid: 1001
  
  livenessProbe:
    enabled: true
    failureThreshold: 3
    initialDelaySeconds: 5
    periodSeconds: 30
    timeoutSeconds: 60
  logConnections: 0
  logDisconnections: 0
  maxClientConnections: 100
 
postgresql:
  enabled: true
  existingSecret: ""
  existingSecretKey: postgresql-password
  master:

    podAnnotations:
      cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    tolerations: []
  persistence:
    accessModes:
    - ReadWriteOnce
    enabled: true
    size: 8Gi
    
  postgresqlDatabase: airflow
  postgresqlPassword: airflow
  postgresqlUsername: postgres

redis:
  cluster:
    enabled: false
    slaveCount: 1
  enabled: true
  existingSecret: ""
  existingSecretPasswordKey: redis-password
  master:
    persistence:
      accessModes:
      - ReadWriteOnce
      enabled: false
      size: 8Gi
 
    podAnnotations:
      cluster-autoscaler.kubernetes.io/safe-to-evict: "true"

  password: airflow
  slave:

    persistence:
      accessModes:
      - ReadWriteOnce
      enabled: false
      size: 8Gi
 
    podAnnotations:
      cluster-autoscaler.kubernetes.io/safe-to-evict: "true"


serviceMonitor:
  enabled: false
  interval: 30s
  path: /admin/metrics
  selector:
    prometheus: kube-prometheus


fraudcase:
  replicaCount: 1
  image:
    repository: ghcr.io/catenax-ng/product-vas-fraud-workers
    tag: main

  rmqUrl: <path:value-added-service/data/dev/worker#rmqUrl>
  rmqQueueName: <path:value-added-service/data/dev/worker#rmqQueueName>
  sentryDsn: <path:value-added-service/data/dev/worker#sentryDsn>

  catenaxApiUrl: <path:value-added-service/data/dev/worker#catenaxApiUrl>
  catenaxApiKey: <path:value-added-service/data/dev/worker#catenaxApiKey>
  
  cdqApiUrl: <path:value-added-service/data/dev/worker#cdqApiUrl>
  cdqApiKey: <path:value-added-service/data/dev/worker#cdqApiKey>

  livenessProbe:
    enabled: true
  readinessProbe:
    enabled: true