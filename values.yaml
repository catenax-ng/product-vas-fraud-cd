global:
  tag: "latest"

dashboard:
  service:
    type: ClusterIP
    port: 80
  
  image:
    repository: ghcr.io/catenax-ng/product-vas-fraud-dashboard
    tag: main
    pullPolicy: Always
  replicaCount: 1
  registrySecret: "catenax"
  apiHost: api-fraud-dashboard.dev.demo.catena-x.net
  apiPort: 8080
  ingress:
    enabled: true
    path: "/"
    service:
      port: http
    annotations: 
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/ssl-passthrough: "true"
      nginx.ingress.kubernetes.io/proxy-body-size: 10m
    
    hosts:
    - name: fraud-dashboard.dev.demo.catena-x.net
      tls: true 
      tlsSecret: tls-secret

  livenessProbe:
    enabled: false
  readinessProbe:
    enabled: false

api:
  replicaCount: 1
  registrySecret: "catenax"
  image:
    repository: ghcr.io/catenax-ng/product-vas-fraud-api
    tag: main
    pullPolicy: Always
  service:
    type: ClusterIP
    port: 8080

  db:
    host: "product-value-added-service-postgresql-ha-postgresql-headless"
    port: 5432
    user: <path:value-added-service/data/dev/api#dbuser>
    pwd: <path:value-added-service/data/dev/api#dbpassword>
    name: <path:value-added-service/data/dev/api#dbname>
  sentryDsn: <path:value-added-service/data/dev/api#sentryDsn>
  cdqKey: "<path:value-added-service/data/dev/api#cdqKey>"

  ingress:
    enabled: true
    path: "/"
    service:
      port: 8080
    certManager: false
    annotations: 
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/ssl-passthrough: "true"
      nginx.ingress.kubernetes.io/proxy-body-size: 10m
    paths: /
    hosts:
    - name: api-fraud-dashboard.dev.demo.catena-x.net
      tls: true 
      tlsSecret: tls-secret
 
  dashboardUrl: https://fraud-dashboard.dev.demo.catena-x.net
  keycloak:
    authUrl: "https://centralidp.dev.demo.catena-x.net/auth"
    #authUrl: https://keycloak.catenax-cdq.com/auth/
    clientResource: "Cl9-CDQ-Fraud"
    clientRole: "fraud_app_user"
    realm: "CX-Central"
  # -> secret
  
  livenessProbe:
    enabled: true
  readinessProbe:
    enabled: true

rabbitmq:
  enabled: true
  replicaCount: 1
  auth:
    erlangCookie: <path:value-added-service/data/dev/rmq#erlangCookie>
    username: <path:value-added-service/data/dev/rmq#username>
    password: <path:value-added-service/data/dev/rmq#password>
  plugins: "rabbitmq_management rabbitmq_peer_discovery_k8s"

  extraSecrets:
    load-definition:
      load_definition.json: |
        {
          "queues": [
          {
            "name": "catenax-fraud-sync-test",
            "vhost": "/",
            "durable": true,
            "auto_delete": false,
            "arguments": {}
          }],
          "vhosts": [
          {
            "name": "/"
          }],
          "permissions":[
          { 
            "user": "cxadmin", "vhost": "/", "configure": ".*", "write": ".*", "read": ".*" }
          ],
        }
        
  loadDefinition:
    enabled: true
    existingSecret: load-definition
  extraConfiguration: |
    load_definitions = /app/load_definition.json

  ingress:
    enabled: true
    path: /

    pathType: ImplementationSpecific
    hostname: rabbitmq-fraud-dashboard.dev.demo.catena-x.net
    annotations: 
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/ssl-passthrough: "true"
      nginx.ingress.kubernetes.io/proxy-body-size: 10m
      nginx/client_max_body_size: 10m
      nginx.ingress.kubernetes.io/proxy-buffering: "on"
      nginx.ingress.kubernetes.io/proxy-connect-timeout: "4000"
      nginx.ingress.kubernetes.io/proxy-next-upstream-timeout: "4000"
      nginx.ingress.kubernetes.io/proxy-next-upstream-tries: "20"
      nginx.ingress.kubernetes.io/proxy-read-timeout: "4000"
      nginx.ingress.kubernetes.io/proxy-send-timeout: "4000"
    tls:
      enabled: true
      
    extraTls:
      - hosts:  
        - rabbitmq-fraud-dashboard.dev.demo.catena-x.net
        secretName: "tls-secret"

postgresql-ha:
  
  enabled: true
  clusterDomain: cluster.local
  serviceAccount:
    enabled: false
  
  postgresql:
    username: dashboard
    password: <path:value-added-service/data/dev/postgresql#password>
    repmgrPassword: <path:value-added-service/data/dev/postgresql#repmgrPassword>
    database: dashboard
    replicaCount: 2 
    updateStrategyType: RollingUpdate    
    securityContext:
      enabled: true
      fsGroup: 1001   
  
    pdb:
      create: false
      minAvailable: 1
  
  postgresqlImage:
    registry: docker.io
    repository: bitnami/postgresql-repmgr
    tag: 11.15.0-debian-10-r44
    debug: false

  pgpool:
    adminPassword: <path:value-added-service/data/dev/postgresql#password>
    srCheckDatabase: postgres
    replicaCount: 1
    securityContext:
      enabled: true
      fsGroup: 1001

  pgpoolImage:
    registry: docker.io
    repository: bitnami/pgpool
    tag: 4.3.1-debian-10-r38
    pullPolicy: IfNotPresent
    debug: false
  
  volumePermissionsImage:
    registry: docker.io
    repository: bitnami/bitnami-shell
    tag: 10-debian-10-r378
    pullPolicy: Always  
  
  metricsImage:
    registry: docker.io
    repository: bitnami/postgres-exporter
    tag: 0.10.1-debian-10-r66
    pullPolicy: IfNotPresent
    debug: false 
  
  persistence:
    enabled: true    
    accessMode: ReadWriteMany
    size: 8Gi

airflow:

  legacyCommands: false  
  executor: CeleryExecutor
  fernetKey: "<path:value-added-service/data/dev/airflow#fernetKey>"
  webserverSecretKey: "<path:value-added-service/data/dev/airflow#webserverSecretKey>"
 
  gitUsers:
    username: "<path:value-added-service/data/dev/airflow#gitUser>"
    password: "<path:value-added-service/data/dev/airflow#gitPassword>"

  users:
    - username: <path:value-added-service/data/dev/rmq#username>
      password: <path:value-added-service/data/dev/rmq#password>
      role: Admin
      email: path:value-added-service/data/dev/airflow#email>
      firstName: admin
      lastName: admin

  usersUpdate: true

  connectionsUpdate: true
  variablesUpdate: true
  poolsUpdate: true
  defaultSecurityContext:
    ## sets the filesystem owner group of files/folders in mounted volumes
    ## this does NOT give root permissions to Pods, only the "root" group
    fsGroup: 0


  extraPipPackages: 
  - apache-airflow[sentry]
  protectedPipPackages:
    - "apache-airflow"


  ###################################
  ## COMPONENT | Airflow Webserver
  ###################################
  web:
    service:
      sessionAffinity: "None"
      type: ClusterIP
      externalPort: 8080
      loadBalancerIP: ""
      nodePort:
        http: ""


  triggerer:
    enabled: true

  flower:   
    enabled: true

  ###################################
  ## CONFIG | Airflow DAGs
  ###################################
  dags:
    
 
    persistence:
      enabled: false
      size: 1Gi
    gitSync:
      enabled: true      
      repo: "https://github.com/catenax-ng/product-vas-fraud-dags.git"     
      branch: main

  createUserJob:
    useHelmHooks: false
  migrateDatabaseJob:
    useHelmHooks: false

  ingress:
    apiVersion: networking.k8s.io/v1
    enabled: true
    
    web:
      annotations: 
        kubernetes.io/ingress.class: nginx
        nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
        nginx.ingress.kubernetes.io/ssl-passthrough: "true"
        nginx.ingress.kubernetes.io/proxy-body-size: 10m
      
      host: airflow-fraud-dashboard.dev.demo.catena-x.net

      tls:
        enabled: true
        secretName: "tls-secret"

    flower:

      annotations: 
        kubernetes.io/ingress.class: nginx
        nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
        nginx.ingress.kubernetes.io/ssl-passthrough: "true"
        nginx.ingress.kubernetes.io/proxy-body-size: 10m
     
      host: flower-fraud-dashboard.dev.demo.catena-x.net
      tls:
        enabled: true
        secretName: "tls-secret"

  rbac:
    create: true
    events: true

  serviceAccount:
    create: true

  pgbouncer:
    enabled: true
   
  postgresql:
    enabled: true
    database: airflow
    postgresPassword: <path:value-added-service/data/dev/airflow#pgpassword>
    username: postgres  

    persistence:
      enabled: true
      accessModes:
        - ReadWriteOnce
      size: 8Gi
    
  redis:
    enabled: true
    password: airflow



fraudcase:
  replicaCount: 1
  image:
    repository: ghcr.io/catenax-ng/product-vas-fraud-workers
    tag: main

  rmqUrl: <path:value-added-service/data/dev/worker#rmqUrl>
  rmqQueueName: <path:value-added-service/data/dev/worker#rmqQueueName>
  sentryDsn: <path:value-added-service/data/dev/worker#sentryDsn>

  catenaxApiUrl: "<path:value-added-service/data/dev/worker#catenaxApiUrl>"
  catenaxApiKey: "<path:value-added-service/data/dev/worker#catenaxApiKey>"
  
  cdqApiUrl: "<path:value-added-service/data/dev/worker#cdqApiUrl>"
  cdqApiKey: "<path:value-added-service/data/dev/worker#cdqApiKey>"

  livenessProbe:
    enabled: true
  readinessProbe:
    enabled: true

pgadmin4:
  enabled: true
  secret:
    password: "<path:value-added-service/data/dev/pgadmin4#password>"
  env:
    email: fraud@catena-x.net
  existingSecret: secret-pgadmin4
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
    hosts:
      - host: pgadmin-fraud-dashboard.dev.demo.catena-x.net
        paths:
        - path: /
          pathType: Prefix
    tls:
      - hosts:
        - pgadmin-fraud-dashboard.dev.demo.catena-x.net
        secretName: tls-secret