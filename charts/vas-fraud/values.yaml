global:
  tag: "latest"

dashboard:
  service:
    type: ClusterIP
    port: 80
    targetport: 8080
  
  image:
    repository: ghcr.io/catenax-ng/product-vas-fraud-dashboard
    tag: main
    pullPolicy: Always
  replicaCount: 1
  registrySecret: "catenax"
  apiPort: 8080
  ingress:
    enabled: true
    path: "/"
    service:
      port: http
    annotations: 
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/ssl-passthrough: "true"
      nginx.ingress.kubernetes.io/proxy-body-size: 10m

  livenessProbe:
    enabled: false
  readinessProbe:
    enabled: false

api:
  replicaCount: 1
  registrySecret: "catenax"
  image:
    repository: ghcr.io/catenax-ng/product-vas-fraud-api
    tag: main
    pullPolicy: Always
  service:
    type: ClusterIP
    port: 8080

  db:
    host: "product-value-added-service-postgresql-ha-postgresql-headless"
    port: 5432

  ingress:
    enabled: true
    path: "/"
    service:
      port: 8080
    certManager: false
    annotations: 
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/ssl-passthrough: "true"
      nginx.ingress.kubernetes.io/proxy-body-size: 10m
    paths: /
 
  keycloak:
    clientResource: "Cl9-CDQ-Fraud"
    clientRole: "fraud_app_user"
    realm: "CX-Central"
  # -> secret
  
  livenessProbe:
    enabled: true
  readinessProbe:
    enabled: true

rabbitmq:
  enabled: true
  replicaCount: 1
  plugins: "rabbitmq_management rabbitmq_peer_discovery_k8s"

  extraSecrets:
    load-definition:
      load_definition.json: |
        {
          "queues": [
          {
            "name": "catenax-fraud-sync-test",
            "vhost": "/",
            "durable": true,
            "auto_delete": false,
            "arguments": {}
          }],
          "vhosts": [
          {
            "name": "/"
          }],
          "permissions":[
          { 
            "user": "cxadmin", "vhost": "/", "configure": ".*", "write": ".*", "read": ".*" }
          ],
        }
        
  loadDefinition:
    enabled: true
    existingSecret: load-definition
  extraConfiguration: |
    load_definitions = /app/load_definition.json

  ingress:
    enabled: true
    path: /

    pathType: ImplementationSpecific
    annotations: 
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/ssl-passthrough: "true"
      nginx.ingress.kubernetes.io/proxy-body-size: 10m
      nginx/client_max_body_size: 10m
      nginx.ingress.kubernetes.io/proxy-buffering: "on"
      nginx.ingress.kubernetes.io/proxy-connect-timeout: "4000"
      nginx.ingress.kubernetes.io/proxy-next-upstream-timeout: "4000"
      nginx.ingress.kubernetes.io/proxy-next-upstream-tries: "20"
      nginx.ingress.kubernetes.io/proxy-read-timeout: "4000"
      nginx.ingress.kubernetes.io/proxy-send-timeout: "4000"
    tls:
      enabled: true

postgresql-ha:
  
  enabled: true
  clusterDomain: cluster.local
  serviceAccount:
    enabled: false
  
  postgresql:
    database: dashboard
    replicaCount: 2
    updateStrategyType: RollingUpdate    
    pod:
      securityContext:
        enabled: true
        fsGroup: 1001   
  
    pdb:
      create: false
      minAvailable: 1
  
  postgresqlImage:
    registry: docker.io
    repository: bitnami/postgresql-repmgr
    tag: 15.1.0
    debug: false

  pgpool:
    srCheckDatabase: postgres
    replicaCount: 1
    securityContext:
      enabled: true
      fsGroup: 1001

  pgpoolImage:
    registry: docker.io
    repository: bitnami/pgpool
    tag: 4.4.1
    pullPolicy: IfNotPresent
    debug: false
  
  volumePermissionsImage:
    registry: docker.io
    repository: bitnami/bitnami-shell
    tag: 11-debian-11
    pullPolicy: Always  
  
  metricsImage:
    registry: docker.io
    repository: bitnami/postgres-exporter
    tag: 0.11.1
    pullPolicy: IfNotPresent
    debug: false 
  
  persistence:
    enabled: true    
    accessMode: ReadWriteMany
    size: 8Gi

airflow:

  airflow:
    legacyCommands: false  
    executor: CeleryExecutor
 
    usersUpdate: true
    connectionsUpdate: true
    variablesUpdate: true
    poolsUpdate: true
    defaultSecurityContext:
      ## sets the filesystem owner group of files/folders in mounted volumes
      ## this does NOT give root permissions to Pods, only the "root" group
      fsGroup: 0

    extraPipPackages: 
    - apache-airflow[sentry]
    protectedPipPackages:
      - "apache-airflow"

  ###################################
  ## COMPONENT | Airflow Webserver
  ###################################
  web:
    service:
      sessionAffinity: "None"
      type: ClusterIP
      externalPort: 8080
      loadBalancerIP: ""
      nodePort:
        http: ""

  triggerer:
    enabled: true

  flower:   
    enabled: true

  ###################################
  ## CONFIG | Airflow DAGs
  ###################################
  dags:
    
 
    persistence:
      enabled: false
      size: 1Gi
    gitSync:
      enabled: true      
      repo: "https://github.com/catenax-ng/product-vas-fraud-dags.git"     
      branch: main

  createUserJob:
    useHelmHooks: false
  migrateDatabaseJob:
    useHelmHooks: false

  ingress:
    apiVersion: networking.k8s.io/v1
    enabled: true
    
    web:
      annotations: 
        kubernetes.io/ingress.class: nginx
        nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
        nginx.ingress.kubernetes.io/ssl-passthrough: "true"
        nginx.ingress.kubernetes.io/proxy-body-size: 10m
      
      tls:
        enabled: true
        secretName: "tls-secret"

    flower:

      annotations: 
        kubernetes.io/ingress.class: nginx
        nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
        nginx.ingress.kubernetes.io/ssl-passthrough: "true"
        nginx.ingress.kubernetes.io/proxy-body-size: 10m
     
      tls:
        enabled: true
        secretName: "tls-secret"

  rbac:
    create: true
    events: true

  serviceAccount:
    create: true

  pgbouncer:
    enabled: true
   
  postgresql:
    enabled: true
    database: airflow
    username: postgres  

    persistence:
      enabled: true
      accessModes:
        - ReadWriteOnce
      size: 8Gi
    
  redis:
    enabled: true

fraudcase:
  replicaCount: 1
  image:
    repository: ghcr.io/catenax-ng/product-vas-fraud-workers
    tag: main

  livenessProbe:
    enabled: true
  readinessProbe:
    enabled: true

pgadmin4:
  enabled: true
  env:
    email: fraud@catena-x.net
  existingSecret: secret-pgadmin4
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
